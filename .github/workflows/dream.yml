name: DREAM Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  linux-octave:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install deps
      run: |
        sudo apt -yq update
        sudo add-apt-repository ppa:ubuntuhandbook1/octave
        sudo apt install -yq --no-install-recommends octave
        sudo apt install -yq --no-install-recommends octave-dev

    - name: CMake Configure
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_MEX=off -DBUILD_OCT=on

    - name: CMake Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    #- name: Test
    #  working-directory: ${{github.workspace}}/build
    ##  # Execute tests defined by the CMake configuration.
     # # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
     # run: ctest -C ${{env.BUILD_TYPE}}

  linux-matlab:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install deps
      run: |
        sudo apt -yq update
        sudo apt install -yq --no-install-recommends libfftw3-dev

    # Sets up MATLAB on the GitHub Actions runner
    - name: Setup MATLAB
      uses: matlab-actions/setup-matlab@v2

    - name: CMake Configure
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_MEX=on -DBUILD_OCT=off

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

  linux-python:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install deps
      run: |
        sudo apt -yq update
        sudo apt install -yq --no-install-recommends libfftw3-dev
        sudo apt install -yq --no-install-recommends python3-pybind11
        sudo apt install -yq --no-install-recommends python3-numpy

    - name: CMake Configure
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_MEX=off -DBUILD_OCT=off -DBUILD_PYTHON=on

    - name: CMake Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

  macos-intel-octave:

    runs-on: macos-13

    steps:
    - uses: actions/checkout@v4

    - name: Install deps
      run: |
        sudo curl https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -o miniconda.sh
        sudo echo "1"
        sudo mkdir -p ~/miniconda3
        sudo echo "2"
        sudo bash miniconda.sh -b -u -p ~/miniconda3
        sudo echo "3"
        sudo ls ~/miniconda3/
        sudo echo "4"
        sudo ~/miniconda3/conda init --all
        sudo echo "5"
        sudo type -a conda
        sudo echo "6"
        sudo conda install -c conda-forge octave

    - name: CMake Configure
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_MEX=off -DBUILD_OCT=on

    - name: CMake Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

  macos-intel-matlab:

    runs-on: macos-13

    steps:
    - uses: actions/checkout@v4

    - name: Install deps
      run: |
        sudo curl https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -o miniconda.sh
        sudo mkdir -p ~/miniconda3
        sudo bash miniconda.sh -b -u -p ~/miniconda3
        sudo ~/miniconda3/conda init --all
        sudo conda install -c conda-forge fftw

    - name: Setup MATLAB
      uses: matlab-actions/setup-matlab@v2

    - name: CMake Configure
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_MEX=on -DBUILD_OCT=off

    - name: CMake Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

  windows-matlab:

    runs-on: windows-latest

    steps:

    - uses: actions/checkout@v4

    - uses: conda-incubator/setup-miniconda@v3
      with:
        miniconda-version: latest
        activate-environment: test

    - name: Install deps
      shell: powershell
      run: |
        conda install -c conda-forge fftw
        conda install -c conda-forge vim

    # Sets up MATLAB on the GitHub Actions runner
    - name: Setup MATLAB
      uses: matlab-actions/setup-matlab@v2

    - name: CMake Configure
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_MEX=on -DBUILD_OCT=off

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

  linux-user-manual:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install LaTeX
      run: |
        sudo apt -yq update
        sudo apt install texlive-full

    - name: CMake Configure
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_MEX=off -DBUILD_OCT=off -DBUILD_USERMAN=on

    - name: CMake Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
